generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  firstName      String
  lastName       String
  age            Int
  gender         String
  city           String
  country        String
  email          String          @unique
  passwordHash   String
  language       String?
  description    String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  profilePic     String?
  userRole       String?

  trips          Trip[]
  communityPosts CommunityPost[]  // reverse relation
}

enum TripStatus {
  UPCOMING
  ONGOING
  COMPLETED
}

model Trip {
  id             Int           @id @default(autoincrement())
  userId         Int
  name           String
  startDate      DateTime
  endDate        DateTime
  description    String?
  coverPhoto     String?
  status         TripStatus    @default(UPCOMING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  user           User          @relation(fields: [userId], references: [id])
  stops          TripsTo[]
  budgets        Budget[]
  suggestions    Suggestion[]
  stopActivities StopActivity[]
  communityPosts CommunityPost[]  // <-- added opposite relation for CommunityPost
}

model City {
  id              Int           @id @default(autoincrement())
  name            String
  state           String
  country         String
  costIndex       Float
  popularityScore Int
  landmark_img    String?

  stops           TripsTo[]
  activities      Activity[]
  stopActivities  StopActivity[]  // reverse relation
}

model TripsTo {
  tripId    Int
  cityId    Int
  stopIndex Int

  trip         Trip      @relation(fields: [tripId], references: [id])
  city         City      @relation(fields: [cityId], references: [id])
  stopActivities StopActivity[]  // <-- added opposite relation for StopActivity

  @@id([tripId, cityId])
}

model Activity {
  id              Int           @id @default(autoincrement())
  cityId          Int
  name            String
  type            String
  cost            Float
  durationMinutes Int
  description     String?
  imageUrl        String?

  city            City          @relation(fields: [cityId], references: [id])
  stopActivities  StopActivity[]  // reverse relation
}

model StopActivity {
  id           Int       @id @default(autoincrement())
  tripId       Int
  cityId       Int
  activityId   Int
  date         DateTime?
  time         String?
  notes        String?

  stop         TripsTo   @relation(fields: [tripId, cityId], references: [tripId, cityId])
  activity     Activity  @relation(fields: [activityId], references: [id])
  trip         Trip      @relation(fields: [tripId], references: [id])
  city         City      @relation(fields: [cityId], references: [id])   // <-- added opposite relation for City

  @@unique([tripId, cityId, activityId])
}

model Budget {
  id       Int     @id @default(autoincrement())
  tripId   Int
  category String
  amount   Float

  trip     Trip    @relation(fields: [tripId], references: [id])
}

model Suggestion {
  id       Int    @id @default(autoincrement())
  name     String
  type     String
  tripId   Int
  trip     Trip   @relation(fields: [tripId], references: [id])
}

model CommunityPost {
  id          Int      @id @default(autoincrement())
  userId      Int
  tripId      Int?     // optional link to trip
  title       String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  trip        Trip?    @relation(fields: [tripId], references: [id])
}

model Admin {
  admin_id   Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String   @unique
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
