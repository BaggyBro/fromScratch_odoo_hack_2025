generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  firstName    String
  lastName     String
  age          Int
  gender       String
  city         String
  country      String
  email        String    @unique
  passwordHash String
  language     String?
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  trips        Trip[]
  communityPosts CommunityPost[]  // ðŸ‘ˆ reverse relation
}


model Trip {
  id          Int           @id @default(autoincrement())
  userId      Int
  name        String
  startDate   DateTime
  endDate     DateTime
  description String?
  coverPhoto  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user        User          @relation(fields: [userId], references: [id])
  stops       TripsTo[]
  budgets     Budget[]
  suggestions Suggestion[]
  stopActivities StopActivity[]   // ðŸ‘ˆ reverse relation
}

model City {
  id              Int           @id @default(autoincrement())
  name            String
  state           String
  country         String
  costIndex       Float
  popularityScore Int

  stops           TripsTo[]
  activities      Activity[]
  stopActivities  StopActivity[]  // ðŸ‘ˆ reverse relation
}

model TripsTo {
  tripId    Int
  cityId    Int
  stopIndex Int

  trip Trip @relation(fields: [tripId], references: [id])
  city City @relation(fields: [cityId], references: [id])

  @@id([tripId, cityId])
}

model Activity {
  id              Int           @id @default(autoincrement())
  cityId          Int
  name            String
  type            String
  cost            Float
  durationMinutes Int
  description     String?
  imageUrl        String?

  city            City          @relation(fields: [cityId], references: [id])
  stopActivities  StopActivity[]  // ðŸ‘ˆ reverse relation
}

model StopActivity {
  id           Int      @id @default(autoincrement())
  tripId       Int
  cityId       Int
  activityId   Int
  date         DateTime?
  time         String?
  notes        String?

  // Relations
  trip         Trip       @relation(fields: [tripId], references: [id])
  city         City       @relation(fields: [cityId], references: [id])
  activity     Activity   @relation(fields: [activityId], references: [id])

  @@unique([tripId, cityId, activityId])
}

model Budget {
  id       Int     @id @default(autoincrement())
  tripId   Int
  category String
  amount   Float

  trip     Trip    @relation(fields: [tripId], references: [id])
}

model Suggestion {
  id       Int    @id @default(autoincrement())
  name     String
  type     String
  tripId   Int
  trip     Trip   @relation(fields: [tripId], references: [id])
}

model CommunityPost {
  id          Int      @id @default(autoincrement())
  userId      Int
  title       String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
}

